<!--
    ScadaBR - Open Source M2M - http://mango.serotoninsoftware.com
    Copyright (C) 20013-2014 Daniel Benitez de Haro.
    @author Daniel Benitez
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/.
 -->

<h1>Description</h1>
<p>
This data source is ready to connect and get all the data from a service listening to sockect connections at a concrete <b>Port</b> of a server <b>Host</b>.

Two operations modes are available for this data source: 
</p>
<ol>
<li>Command sending and response receiving</li>
<li>Periodically data receiving</li>
</ol>

<h3>Command sending and response receiving</h3>
<p>
This operation mode is based on sending commands which are configured on each data source point. Each command is sent to the server,
followed by one or more delimiter characters according to the server data format(<b>Frame format for command</b>). Once the command has
been sent, the server response is analyzed to get the data that fulfill the condition established by the <b>Stop Mode</b> parameter. 
This stop condition could be the same used for command sending or a customized one. 
</p>
<p>
If the response stop condition is different from the defined in <b>Frame format for command</b> parameter, the user can select between three different
options for response stop conditions, including:
</p>
<ul>
<li>
<b>Until Characters</b> option if the response stop condition is a concrete character of set of characters, that can be ASCII Character(s) or
Hexadecimal Value, depending on the value of the parameter <b>Character Mode</b>.
</li>
<li>
<
</li>
</ul>
<p>
In this operation mode, it is possible to configure each data point to send up to three consecutive commands to get the desired response. if the <b>Number of commands</b> configured in the data point is greater than one,
the response received from the server is compared to the <b>Expected response for first command</b>. If both match, a <b>Second Command</b> is sent, repeating this process in case the number of commands is greater than two. Conversely,
if the captured response does not match the expected one, an error arises indicating this circumstance. The option of having more than one command into a data point has been included to give some kind of flexibility to those data sources
that require more than one command to provide the sought response. 
</p>
<h3>Periodically data receiving</h3>
<p>
The periodically data receiving operation mode is based on the periodic receiving of data from the server. This mode is active when the <b>Number of commands</b> field in the data source points have a zero value, indicating that no command has been configured. 
In this case no command fields are shown. This operation mode is indicated for the case that some of the desired data are directly provided by the server without receiving any command. The obtained values are stored into the data points by regular expressions.
</p>

<h3>Configuration</h3>
<p>
All data source requires a <b>Name</b>, which describes the connected device or the data source purpose. It also requires an <b>Update Period</b>, that determines how often the server is polled for data, and 
the maximum number of connection <b>Retries</b> to the server in case of previous failed connection.
</p>
<p>
The communication with the server is configured based on the usual parameters used to establish a socket connection: <b>Host</b> name where the service is running, and <b>Port</b> number where that service is listening to new connections.
</p>
<p>
The <b>Datapoint read one by one</b> parameter must be checked if the Socket server needs the socket connection to be opened and close for every datapoint. By default, this option is unchecked, indicating that a unique connection is open for each poll, 
retrieving the data for the configured datapoints from the server, and closing the connection when all datapoints have been processed. 
</p>
<p>
Most of the socket communication systems use carriage return (\r) and line feed (\n) characters to indicate the command and response end. To make it simple, this data source has a <b>Frame format for command</b> parameter that give the option to
end the command with some combination of carriage return and line feed characters. These same characters can be used to indicate the end of the expected response from the server by checking the <b>Same format for commands
and responses</b> box. 
</p>
<p>
In case this box is not checked, the <b>Stop Mode</b> parameter is used to determine the final characters to include in the expected response. In that case, there are two possibilities:
</p>
<ul>
<li>
<b>Number of characters</b>:  The expected response only stores the first <b>Number of characters</b> from the server raw response.
</li>
<li>
<b>Until character(s) C</b>: The expected response only store characters until a set of custom characters are found. These custom characters can be <b>ASCCI character(s)</b> or an <b>Hexadecimal value</b>. The rest of the server raw response is discarded.    
</li>
</ul>
<p>
The <b>Buffer size</b> indicates the maximum number of characters to store from a server response. When the data source has any data point configured to work in <b>Periodically data receiving</b> mode (Zero commands in data point), is highly advisable to take into account the relation between the <b>Buffer size</b>,
the data source <b>Update period</b> and the time between consecutive server responses. If this time is small, and the data source update period is high, it is possible that the receive buffer does not have enough size to hold all the data received from the server, so
some data could be lost. For this reason it is advisable to set update period and buffer size data source parameters that fit well with the time between server responses update.
</p>
