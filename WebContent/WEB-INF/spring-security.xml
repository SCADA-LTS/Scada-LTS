<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
         xmlns:b="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">

    <http use-expressions="true" disable-url-rewriting="true" pattern="/services/**"
          authentication-manager-ref="authenticationManager" entry-point-ref="basicAuthenticationEntryPoint">
        <headers>
            <cache-control disabled="true"/>
            <content-type-options disabled="true"/>
            <hsts/>
            <frame-options policy="SAMEORIGIN"/>
            <xss-protection/>
            <header ref="headersFromSystemSettingsWriter"/>
        </headers>
        <csrf disabled="true"/>
        <intercept-url pattern="/services/API" access="permitAll" method="GET" requires-channel="https"/>
        <intercept-url pattern="/**" access="hasRole('ROLE_SERVICES')" requires-channel="https"/>

        <custom-filter position="BASIC_AUTH_FILTER" ref="basicAuthFilter"/>
        <session-management session-fixation-protection="newSession" />
    </http>

    <http use-expressions="true" disable-url-rewriting="true"
          authentication-manager-ref="authenticationManager">
        <headers>
            <cache-control disabled="true"/>
            <content-type-options disabled="true"/>
            <hsts/>
            <frame-options policy="SAMEORIGIN"/>
            <xss-protection/>
            <header ref="headersFromSystemSettingsWriter"/>
        </headers>
        <csrf disabled="true"/>

        <!-- Login Form -->
        <intercept-url pattern="/login.htm" access="permitAll" />

        <!-- DWR -->
        <intercept-url pattern="/dwr/*.js" access="permitAll" />
        <intercept-url pattern="/dwr/interface/*.js" access="permitAll" />
        <intercept-url pattern="/dwr/**" access="permitAll" />

        <!-- Static resources -->
        <intercept-url pattern="/graphics/**" access="permitAll" />
        <intercept-url pattern="/images/**" access="permitAll" />
        <intercept-url pattern="/img/**" access="permitAll" />
        <intercept-url pattern="/assets/**" access="permitAll" />
        <intercept-url pattern="/js/**" access="permitAll" />
        <intercept-url pattern="/css/**" access="permitAll" />
        <intercept-url pattern="/resources/**" access="permitAll" />
        <intercept-url pattern="/static/**" access="permitAll" />
        <intercept-url pattern="/audio/**" access="permitAll" />
        <intercept-url pattern="/uploads/**" access="permitAll" />

        <!-- Anonymous -->
        <intercept-url pattern="/public_view.htm" access="permitAll" />

        <!-- Monitoring -->
        <intercept-url pattern="/monitoring/**" access="permitAll" />

        <!-- REST API User -->

        <!-- Auth -->
        <intercept-url pattern="/api/auth/**" access="permitAll" />

        <!-- WatchList POST/PUT/GET -->
        <intercept-url pattern="/api/watch-lists" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="POST" />
        <intercept-url pattern="/api/watch-lists" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="PUT" />
        <intercept-url pattern="/api/watch-lists/generateXid" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />
        <intercept-url pattern="/api/watch-lists/" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />
        <intercept-url pattern="/api/watch-lists/{id}" access="@guard.hasWatchListReadPermission(request,#id,false)" method="GET" />
        <intercept-url pattern="/api/watch-lists/{id}" access="@guard.hasWatchListOwnerPermission(request,#id,false)" method="DELETE" />

        <!-- View POST/PUT/GET -->
        <!--intercept-url pattern="/api/view/uploads" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="POST" />
        <intercept-url pattern="/api/view" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="POST" />
        <intercept-url pattern="/api/view" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="PUT" />
        <intercept-url pattern="/api/view/generateXid" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" /-->
        <intercept-url pattern="/api/view/getModificationTime/{id}" access="@guard.hasViewReadPermission(request,#id,false)" method="GET" />
        <intercept-url pattern="/api/view/getAll" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />
        <!--intercept-url pattern="/api/view" access="@guard.hasViewReadPermission(request)" method="GET" /-->

        <!-- Report POST/GET/DELETE -->
        <intercept-url pattern="/api/reports/save" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="POST" />
        <intercept-url pattern="/api/reports/search" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="POST" />
        <intercept-url pattern="/api/reports/sendTestEmails" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="POST" />
        <intercept-url pattern="/api/reports/instances" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />
        <intercept-url pattern="/api/reports/instances/{id}" access="@guard.hasReportInstanceOwnerPermission(request,#id,false)" method="DELETE" />
        <intercept-url pattern="/api/reports/run/{id}" access="@guard.hasReportOwnerPermission(request,#id,false)" method="GET" />
        <intercept-url pattern="/api/reports/{id}" access="@guard.hasReportOwnerPermission(request,#id,false)" method="DELETE" />

        <!-- User PUT/GET -->
        <intercept-url pattern="/api/users/" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="PUT" />
        <intercept-url pattern="/api/users/password" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="PUT" />
        <intercept-url pattern="/api/users/{id}" access="@guard.hasUserOwnerPermission(request,#id)" method="GET" />

        <!-- DataPoint GET -->
        <intercept-url pattern="/api/datapoint/getAll" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />
        <intercept-url pattern="/api/datapoint" access="@guard.hasDataPointReadPermission(request)" method="GET" />

        <!-- DataSource GET -->
        <intercept-url pattern="/api/datasource" access="@guard.hasDataSourceReadPermission(request)" method="GET" />

        <!-- PointHierarchy GET -->
        <intercept-url pattern="/api/pointHierarchy/{key}" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />

        <!-- PointValue GET -->
        <intercept-url pattern="/api/point_value/getValue/id/{id}" access="@guard.hasDataPointReadPermission(request,#id,false)" method="GET" />
        <intercept-url pattern="/api/point_value/getValue/{xid}" access="@guard.hasDataPointReadPermission(request,#xid,true)" method="GET" />

        <!-- Event POST/GET -->
        <intercept-url pattern="/api/events/search" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="POST" />
        <intercept-url pattern="/api/events/highestUnsilencedLevelAlarm" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />
        <intercept-url pattern="/api/events/datapoint/{id}" access="@guard.hasDataPointReadPermission(request,#id,false)" method="GET" />

        <!-- Alarm GET -->
        <intercept-url pattern="/api/alarms/live/{offset}/{limit}" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />

        <!-- Chart GET -->
        <intercept-url pattern="/api/amcharts/by-id" access="@guard.hasDataPointReadPermission(request,false,'ids')" method="GET" />
        <intercept-url pattern="/api/amcharts/by-xid" access="@guard.hasDataPointReadPermission(request,true,'ids')" method="GET" />

        <!-- Config GET -->
        <intercept-url pattern="/api/config/replacealert" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />

        <!-- IsAlive POST/GET -->
        <intercept-url pattern="/api/is_alive/watchdog" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="POST" />
        <intercept-url pattern="/api/is_alive/time" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />
        <intercept-url pattern="/api/is_alive/time2" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />

        <!-- Cmp GET -->
        <intercept-url pattern="/api/cmp/get/{xids}" access="@guard.hasDataPointReadPermission(request,#xids,true)" method="GET" />
        <intercept-url pattern="/api/cmp/history/{xIdViewAndIdCmp}" access="@guard.hasViewReadPermission(request,@guard.viewIdentifier(#xIdViewAndIdCmp),false)" method="GET" />

        <!-- SystemSettings GET -->
        <intercept-url pattern="/api/systemSettings/getSystemInfo" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" method="GET" />

        <!-- REST API Admin -->
        <intercept-url pattern="/api/**" access="hasRole('ROLE_ADMIN')" method="POST" />
        <intercept-url pattern="/api/**" access="hasRole('ROLE_ADMIN')" method="GET" />
        <intercept-url pattern="/api/**" access="hasRole('ROLE_ADMIN')" method="PUT" />
        <intercept-url pattern="/api/**" access="hasRole('ROLE_ADMIN')" method="PATCH" />
        <intercept-url pattern="/api/**" access="hasRole('ROLE_ADMIN')" method="OPTIONS" />
        <intercept-url pattern="/api/**" access="hasRole('ROLE_ADMIN')" method="HEAD" />
        <intercept-url pattern="/api/**" access="hasRole('ROLE_ADMIN')" method="TRACE" />

        <!-- Only Admin -->
        <intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')" method="DELETE" />

        <!-- Other -->
        <intercept-url pattern="/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />

        <form-login authentication-success-handler-ref="loginAuthenticationSuccessHandler"
                    authentication-failure-url="/login.htm?error" login-page="/login.htm"
                    password-parameter="password" username-parameter="username"
                    login-processing-url="/login.htm" />

        <custom-filter after="SECURITY_CONTEXT_FILTER" ref="setDataSessionFilter" />
        <session-management session-fixation-protection="newSession" />
        <logout logout-url="/logout.htm" invalidate-session="true" delete-cookies="JSESSIONID"
                success-handler-ref="headerWriterLogoutHandler"/>
    </http>
    <http-firewall ref="defaultHttpFirewall"/>

    <!-- Websocket -->
    <!--websocket-message-broker same-origin-disabled="true">
        <intercept-message pattern="/**" access="isAuthenticated()"/>
    </websocket-message-broker-->

    <authentication-manager id="authenticationManager">
        <authentication-provider>
            <password-encoder ref="scadaPasswordEncoder" />
            <jdbc-user-service id="jdbcUserService" data-source-ref="databaseSource"
                               users-by-username-query="SELECT username, password, disabled = 'N' AS enabled FROM users WHERE username = ?"
                               authorities-by-username-query="SELECT username,
                               CASE WHEN admin = 'Y' THEN 'ROLE_ADMIN'
                                    WHEN username = 'soap-services' THEN 'ROLE_SERVICES'
                                    ELSE 'ROLE_USER'
                               END AS role FROM users WHERE username = ?"/>
        </authentication-provider>
    </authentication-manager>

    <b:bean id="loginAuthenticationSuccessHandler" class="org.scada_lts.login.LoginAuthenticationSuccessHandler" />

    <b:bean id="scadaPasswordEncoder" class="org.scada_lts.login.CustomPasswordEncoder" />

    <b:bean id="defaultHttpFirewall" class="org.springframework.security.web.firewall.DefaultHttpFirewall"/>

    <b:bean id="systemSettingsService" class="org.scada_lts.mango.service.SystemSettingsService" />

    <b:bean id="headersFromSystemSettingsWriter" class="org.scada_lts.web.ws.config.HeadersFromSystemSettingsWriter">
        <b:constructor-arg ref="systemSettingsService"/>
    </b:bean>

    <b:bean id="setDataSessionFilter" class="org.scada_lts.session.SetDataSessionFilter"/>

    <b:bean id="hasPermissionOperations" class="org.scada_lts.web.mvc.api.security.HasPermissionOperations" />
    <b:bean id="withIdentifierGuard" class="org.scada_lts.web.mvc.api.security.WithIdentifierGuard" >
        <b:constructor-arg ref="hasPermissionOperations"/>
    </b:bean>
    <b:bean id="getIdentifierFromHttpParameterGuard" class="org.scada_lts.web.mvc.api.security.GetIdentifierFromHttpParameterGuard" >
        <b:constructor-arg ref="hasPermissionOperations"/>
    </b:bean>
    <b:bean id="guard" class="org.scada_lts.web.mvc.api.security.Guard" >
        <b:constructor-arg ref="withIdentifierGuard"/>
        <b:constructor-arg ref="getIdentifierFromHttpParameterGuard"/>
    </b:bean>

    <b:bean id="basicAuthFilter" class="org.scada_lts.login.LocalBasicAuthFilter">
        <b:constructor-arg ref="authenticationManager"/>
    </b:bean>

    <b:bean id="clearSiteDataHeaderWriter" class="org.scada_lts.login.ScadaClearSiteDataHeaderWriter" >
        <b:constructor-arg>
            <b:list>
                <b:value type="org.scada_lts.login.ScadaClearSiteDataHeaderWriter.Directive">CACHE</b:value>
                <b:value type="org.scada_lts.login.ScadaClearSiteDataHeaderWriter.Directive">COOKIES</b:value>
                <b:value type="org.scada_lts.login.ScadaClearSiteDataHeaderWriter.Directive">STORAGE</b:value>
                <b:value type="org.scada_lts.login.ScadaClearSiteDataHeaderWriter.Directive">EXECUTION_CONTEXTS</b:value>
            </b:list>
        </b:constructor-arg>
    </b:bean>

    <b:bean id="headerWriterLogoutHandler" class="org.scada_lts.login.ScadaHeaderWriterLogoutHandler" >
        <b:constructor-arg ref="clearSiteDataHeaderWriter" />
    </b:bean>

    <b:bean id="basicAuthenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
        <b:property name="realmName" value="Basic Auth"/>
    </b:bean>

    <b:bean id="getSecurityBeans" class="org.scada_lts.web.beans.GetSecurityBeans"/>
</b:beans>