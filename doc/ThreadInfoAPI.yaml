openapi: 3.0.0
servers:
  - url: 'http://localhost:8080/ScadaBR/api'
    description: 'Scada development Server'
    variables: {}
info:
  version: 2.7.2
  title: Scada-LTS API
  description: 'Scada-LTS OpenAPI Specification. Description contains only a SMS and Email new feature REST API'
  termsOfService: ''
  contact:
    name: 'Kamil Jarmusik - SoftQ Developer'
    email: 'kamil.jarmusik@softq.pl'
  license:
    name: 'GPL-2.0'
paths:
  /threads/:
    get:
      tags:
        - ThreadInfoAPI
      description: 'Get all threads'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/stack/:
    get:
      tags:
        - ThreadInfoAPI
      description: 'Get all stacks from threads'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/names/:
    get:
      tags:
        - ThreadInfoAPI
      description: 'Get all thread names'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/group-by/count/:
    get:
      tags:
        - ThreadInfoAPI
      description: 'Group threads count by thread'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/group-by/thread-stack/:
    get:
      tags:
        - ThreadInfoAPI
      description: 'Group stacks by thread'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/group-by/thread-stack/classes/:
    get:
      tags:
        - ThreadInfoAPI
      description: 'Group stack classes by thread'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/group-by/thread-stack/count/:
    get:
      tags:
        - ThreadInfoAPI
      description: 'Group stacks count by thread'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/group-by/stack-thread/:
    get:
      tags:
        - ThreadInfoAPI
      description: 'Group threads by stack'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/group-by/stack-thread/classes/:
    get:
      tags:
        - ThreadInfoAPI
      description: 'Group threads by stack then classes'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/group-by/stack-thread/count/:
    get:
      tags:
        - ThreadInfoAPI
      description: 'Group threads by stack then count'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/group-by/stack-thread/names/:
    get:
      tags:
        - ThreadInfoAPI
      description: 'Group threads by stack then names'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/states/:
    get:
      tags:
        - StateThreadInfoAPI
      description: 'Get all states'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/states/state/{state}/:
    get:
      tags:
        - StateThreadInfoAPI
      description: 'Get threads for state'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
      parameters:
        - name: 'state'
          in: 'path'
          required: true
          schema:
            type: 'string'
            enum: [NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED]
  /threads/states/state/{state}/count/:
    get:
      tags:
        - StateThreadInfoAPI
      description: 'Get threads count for state'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
      parameters:
        - name: 'state'
          in: 'path'
          required: true
          schema:
            type: 'string'
            enum: [NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED]
  /threads/states/state/{state}/classes/:
    get:
      tags:
        - StateThreadInfoAPI
      description: 'Get threads class for state'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
      parameters:
        - name: 'state'
          in: 'path'
          required: true
          schema:
            type: 'string'
            enum: [NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED]
  /threads/states/state/{state}/names/:
    get:
      tags:
        - StateThreadInfoAPI
      description: 'Get threads name for state'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
      parameters:
        - name: 'state'
          in: 'path'
          required: true
          schema:
            type: 'string'
            enum: [NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED]
  /threads/states/group-by/:
    get:
      tags:
        - StateThreadInfoAPI
      description: 'Group threads by state'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/states/group-by/count/:
    get:
      tags:
        - StateThreadInfoAPI
      description: 'Group threads count by state'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/states/group-by/classes/:
    get:
      tags:
        - StateThreadInfoAPI
      description: 'Group thread classes by state'
      responses:
        '200':
          description: 'Get successful'
          headers: { }
  /threads/states/group-by/names/:
    get:
      tags:
        - StateThreadInfoAPI
      description: 'Group thread namew by state'
      responses:
        '200':
          description: 'Get successful'
          headers: { }